//
//  DCNSDiffieHellmanUtility.h
//  Distributed Classes
//
//  Created by Matt Clarke on 07/03/2017.
//  Copyright Â© 2017 Matt Clarke. All rights reserved.
//

#import <Foundation/Foundation.h>

/**
 @brief Provides helper methods for perfoming the Diffie-Hellman Key Exchange.
 @attention Please note that this class is intended as a utility, and so makes uses of code found at:
 https://github.com/benjholla/Diffie-Hellman-iOS
 @license MIT License.
 */
@interface DCNSDiffieHellmanUtility : NSObject

/* Usage:
 *
 * The Diffie-Hellman Key Exchange (DHKEx) works by P1 sending g, p, and A, which are the generator, prime,
 * and g^a mod p respectively. (a is chosen by P1)
 * P2 takes these values in, chooses b, computes B=g^b mod p, and generates the shared key K=A^b mod p.
 * P2 returns B to P1, to allow P1 to compute K=B^a mod p.
 *
 * In terms of the following functions, the sender will call:
 * g = generatePrimeNumber
 * p = generatePrimeNumber
 * if (g > p) {
 int swap = g;
 g = p;
 p = swap;
 }
 * a = generateSecret
 * A = powermod:g power:a modulus:p
 *
 * These can now be sent to the reciever.
 * Reciever will call:
 * b = generateSecret
 * B = powermod:g power:b modulus:p
 * K = powermod:A power:b modulus:p (will need converting to base 16 for use as a string)
 *
 * B can now be returned back to the sender.
 * Sender will call:
 * K = powermod:B power:a modulus:p (will need converting to base 16 for use as a string)
 */

/**
 Applies the power to the base, and then takes the modulus. 
 e.g., g^a mod p
 @param base The base integer
 @param power The power to raise the base to
 @param modulus The modulus to then take
 @return Calculated result.
 */
+ (int)powermod:(int)base power:(int)power modulus:(int)modulus;

/**
 Generates a random number up to a limit specified in the implementation file.
 @return Random number
 */
+ (int)generateRandomNumber;

/**
 Generates a random prime number up to a limit specified in the implementation file.
 @discussion The implementation of this method utilises the Miller-Rabin Primality Test to attempt to
 find a number with a high probability of being prime.
 @return Random prime number
 */
+ (int)generatePrimeNumber;

/**
 Generates a number up to the limit set for prime numbers, without the check for primality.
 @return Random number to be used as a secret
 */
+ (int)generateSecret;

/**
 Converts an integer generated by Diffie-Hellman into a 256-bit key.
 @discussion The key is generated by representing the integer in hexadecimal, which is then hashed with sha256.
 @warning The returned string must be free()'d when no longer required.
 @param input The input integer
 @return 256-bit key
 */
+ (char*)convertToKey:(int)input;

@end
